// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package urlshortener

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UrlShortenerServiceClient is the client API for UrlShortenerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrlShortenerServiceClient interface {
	// Gets an already existing shortened URL by it's key (EX. localhost:40/<lkjhbalsjdhbl>, key between <>)
	GetShortenedUrl(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Url, error)
	// Creates a new shortened URL and returns it as an accessible path
	SetShortenedUrl(ctx context.Context, in *SetShortenedUrlInput, opts ...grpc.CallOption) (*Url, error)
	// Deletes an already existing shortened URL by it's key (EX. localhost:40/<lkjhbalsjdhbl>, key between <>)
	DeleteShortenedUrl(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Void, error)
}

type urlShortenerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUrlShortenerServiceClient(cc grpc.ClientConnInterface) UrlShortenerServiceClient {
	return &urlShortenerServiceClient{cc}
}

func (c *urlShortenerServiceClient) GetShortenedUrl(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Url, error) {
	out := new(Url)
	err := c.cc.Invoke(ctx, "/proto.UrlShortenerService/GetShortenedUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerServiceClient) SetShortenedUrl(ctx context.Context, in *SetShortenedUrlInput, opts ...grpc.CallOption) (*Url, error) {
	out := new(Url)
	err := c.cc.Invoke(ctx, "/proto.UrlShortenerService/SetShortenedUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerServiceClient) DeleteShortenedUrl(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/proto.UrlShortenerService/DeleteShortenedUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlShortenerServiceServer is the server API for UrlShortenerService service.
// All implementations must embed UnimplementedUrlShortenerServiceServer
// for forward compatibility
type UrlShortenerServiceServer interface {
	// Gets an already existing shortened URL by it's key (EX. localhost:40/<lkjhbalsjdhbl>, key between <>)
	GetShortenedUrl(context.Context, *Key) (*Url, error)
	// Creates a new shortened URL and returns it as an accessible path
	SetShortenedUrl(context.Context, *SetShortenedUrlInput) (*Url, error)
	// Deletes an already existing shortened URL by it's key (EX. localhost:40/<lkjhbalsjdhbl>, key between <>)
	DeleteShortenedUrl(context.Context, *Key) (*Void, error)
	mustEmbedUnimplementedUrlShortenerServiceServer()
}

// UnimplementedUrlShortenerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUrlShortenerServiceServer struct {
}

func (UnimplementedUrlShortenerServiceServer) GetShortenedUrl(context.Context, *Key) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortenedUrl not implemented")
}
func (UnimplementedUrlShortenerServiceServer) SetShortenedUrl(context.Context, *SetShortenedUrlInput) (*Url, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetShortenedUrl not implemented")
}
func (UnimplementedUrlShortenerServiceServer) DeleteShortenedUrl(context.Context, *Key) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShortenedUrl not implemented")
}
func (UnimplementedUrlShortenerServiceServer) mustEmbedUnimplementedUrlShortenerServiceServer() {}

// UnsafeUrlShortenerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlShortenerServiceServer will
// result in compilation errors.
type UnsafeUrlShortenerServiceServer interface {
	mustEmbedUnimplementedUrlShortenerServiceServer()
}

func RegisterUrlShortenerServiceServer(s grpc.ServiceRegistrar, srv UrlShortenerServiceServer) {
	s.RegisterService(&_UrlShortenerService_serviceDesc, srv)
}

func _UrlShortenerService_GetShortenedUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServiceServer).GetShortenedUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UrlShortenerService/GetShortenedUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServiceServer).GetShortenedUrl(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortenerService_SetShortenedUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetShortenedUrlInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServiceServer).SetShortenedUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UrlShortenerService/SetShortenedUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServiceServer).SetShortenedUrl(ctx, req.(*SetShortenedUrlInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortenerService_DeleteShortenedUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServiceServer).DeleteShortenedUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UrlShortenerService/DeleteShortenedUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServiceServer).DeleteShortenedUrl(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

var _UrlShortenerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UrlShortenerService",
	HandlerType: (*UrlShortenerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShortenedUrl",
			Handler:    _UrlShortenerService_GetShortenedUrl_Handler,
		},
		{
			MethodName: "SetShortenedUrl",
			Handler:    _UrlShortenerService_SetShortenedUrl_Handler,
		},
		{
			MethodName: "DeleteShortenedUrl",
			Handler:    _UrlShortenerService_DeleteShortenedUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
